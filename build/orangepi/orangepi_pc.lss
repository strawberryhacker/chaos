
/home/strawberry/chaos/build/orangepi/orangepi_pc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .kernel_entry 00000010  42000000  42000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000009ac  42000010  42000010  00010010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  420009bc  420009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  420009c0  420009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000034  420009c4  420009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000438  420009f8  420009f8  000109f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .stack        00000c00  42000e30  42000e30  00010e30  2**0
                  ALLOC
  7 .bss          00000400  42001a30  42001a30  00010e30  2**2
                  ALLOC
  8 .ARM.attributes 0000002d  00000000  00000000  00010e30  2**0
                  CONTENTS, READONLY
  9 .comment      000000a7  00000000  00000000  00010e5d  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000181a  00000000  00000000  00010f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00004d4a  00000000  00000000  0001271e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000013c5  00000000  00000000  00017468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000208  00000000  00000000  00018830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00004e08  00000000  00000000  00018a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000136c  00000000  00000000  0001d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000140  00000000  00000000  0001ebac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010c9  00000000  00000000  0001ecec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00000288  00000000  00000000  0001fdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .kernel_entry:

42000000 <_kernel_s>:

.section .kernel_entry, "ax", %progbits
kernel_entry:

    // Setup the stack for the kernel SVC entry
    ldr sp, =_svc_stack_e
42000000:	e59fd004 	ldr	sp, [pc, #4]	; 4200000c <_kernel_s+0xc>
    isb
42000004:	f57ff06f 	isb	sy

    b main
42000008:	ea000241 	b	42000914 <main>
    ldr sp, =_svc_stack_e
4200000c:	42001830 	.word	0x42001830

Disassembly of section .text:

42000010 <__udivsi3>:
42000010:	1e4a      	subs	r2, r1, #1
42000012:	bf08      	it	eq
42000014:	4770      	bxeq	lr
42000016:	f0c0 8124 	bcc.w	42000262 <__udivsi3+0x252>
4200001a:	4288      	cmp	r0, r1
4200001c:	f240 8116 	bls.w	4200024c <__udivsi3+0x23c>
42000020:	4211      	tst	r1, r2
42000022:	f000 8117 	beq.w	42000254 <__udivsi3+0x244>
42000026:	fab0 f380 	clz	r3, r0
4200002a:	fab1 f281 	clz	r2, r1
4200002e:	eba2 0303 	sub.w	r3, r2, r3
42000032:	f1c3 031f 	rsb	r3, r3, #31
42000036:	a204      	add	r2, pc, #16	; (adr r2, 42000048 <__udivsi3+0x38>)
42000038:	eb02 1303 	add.w	r3, r2, r3, lsl #4
4200003c:	f04f 0200 	mov.w	r2, #0
42000040:	469f      	mov	pc, r3
42000042:	bf00      	nop
42000044:	f3af 8000 	nop.w
42000048:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
4200004c:	bf00      	nop
4200004e:	eb42 0202 	adc.w	r2, r2, r2
42000052:	bf28      	it	cs
42000054:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
42000058:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
4200005c:	bf00      	nop
4200005e:	eb42 0202 	adc.w	r2, r2, r2
42000062:	bf28      	it	cs
42000064:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
42000068:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
4200006c:	bf00      	nop
4200006e:	eb42 0202 	adc.w	r2, r2, r2
42000072:	bf28      	it	cs
42000074:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
42000078:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
4200007c:	bf00      	nop
4200007e:	eb42 0202 	adc.w	r2, r2, r2
42000082:	bf28      	it	cs
42000084:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
42000088:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
4200008c:	bf00      	nop
4200008e:	eb42 0202 	adc.w	r2, r2, r2
42000092:	bf28      	it	cs
42000094:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
42000098:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
4200009c:	bf00      	nop
4200009e:	eb42 0202 	adc.w	r2, r2, r2
420000a2:	bf28      	it	cs
420000a4:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
420000a8:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
420000ac:	bf00      	nop
420000ae:	eb42 0202 	adc.w	r2, r2, r2
420000b2:	bf28      	it	cs
420000b4:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
420000b8:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
420000bc:	bf00      	nop
420000be:	eb42 0202 	adc.w	r2, r2, r2
420000c2:	bf28      	it	cs
420000c4:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
420000c8:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
420000cc:	bf00      	nop
420000ce:	eb42 0202 	adc.w	r2, r2, r2
420000d2:	bf28      	it	cs
420000d4:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
420000d8:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
420000dc:	bf00      	nop
420000de:	eb42 0202 	adc.w	r2, r2, r2
420000e2:	bf28      	it	cs
420000e4:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
420000e8:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
420000ec:	bf00      	nop
420000ee:	eb42 0202 	adc.w	r2, r2, r2
420000f2:	bf28      	it	cs
420000f4:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
420000f8:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
420000fc:	bf00      	nop
420000fe:	eb42 0202 	adc.w	r2, r2, r2
42000102:	bf28      	it	cs
42000104:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
42000108:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
4200010c:	bf00      	nop
4200010e:	eb42 0202 	adc.w	r2, r2, r2
42000112:	bf28      	it	cs
42000114:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
42000118:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
4200011c:	bf00      	nop
4200011e:	eb42 0202 	adc.w	r2, r2, r2
42000122:	bf28      	it	cs
42000124:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
42000128:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
4200012c:	bf00      	nop
4200012e:	eb42 0202 	adc.w	r2, r2, r2
42000132:	bf28      	it	cs
42000134:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
42000138:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
4200013c:	bf00      	nop
4200013e:	eb42 0202 	adc.w	r2, r2, r2
42000142:	bf28      	it	cs
42000144:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
42000148:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
4200014c:	bf00      	nop
4200014e:	eb42 0202 	adc.w	r2, r2, r2
42000152:	bf28      	it	cs
42000154:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
42000158:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
4200015c:	bf00      	nop
4200015e:	eb42 0202 	adc.w	r2, r2, r2
42000162:	bf28      	it	cs
42000164:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
42000168:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
4200016c:	bf00      	nop
4200016e:	eb42 0202 	adc.w	r2, r2, r2
42000172:	bf28      	it	cs
42000174:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
42000178:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
4200017c:	bf00      	nop
4200017e:	eb42 0202 	adc.w	r2, r2, r2
42000182:	bf28      	it	cs
42000184:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
42000188:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
4200018c:	bf00      	nop
4200018e:	eb42 0202 	adc.w	r2, r2, r2
42000192:	bf28      	it	cs
42000194:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
42000198:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
4200019c:	bf00      	nop
4200019e:	eb42 0202 	adc.w	r2, r2, r2
420001a2:	bf28      	it	cs
420001a4:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
420001a8:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
420001ac:	bf00      	nop
420001ae:	eb42 0202 	adc.w	r2, r2, r2
420001b2:	bf28      	it	cs
420001b4:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
420001b8:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
420001bc:	bf00      	nop
420001be:	eb42 0202 	adc.w	r2, r2, r2
420001c2:	bf28      	it	cs
420001c4:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
420001c8:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
420001cc:	bf00      	nop
420001ce:	eb42 0202 	adc.w	r2, r2, r2
420001d2:	bf28      	it	cs
420001d4:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
420001d8:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
420001dc:	bf00      	nop
420001de:	eb42 0202 	adc.w	r2, r2, r2
420001e2:	bf28      	it	cs
420001e4:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
420001e8:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
420001ec:	bf00      	nop
420001ee:	eb42 0202 	adc.w	r2, r2, r2
420001f2:	bf28      	it	cs
420001f4:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
420001f8:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
420001fc:	bf00      	nop
420001fe:	eb42 0202 	adc.w	r2, r2, r2
42000202:	bf28      	it	cs
42000204:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
42000208:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
4200020c:	bf00      	nop
4200020e:	eb42 0202 	adc.w	r2, r2, r2
42000212:	bf28      	it	cs
42000214:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
42000218:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
4200021c:	bf00      	nop
4200021e:	eb42 0202 	adc.w	r2, r2, r2
42000222:	bf28      	it	cs
42000224:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
42000228:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
4200022c:	bf00      	nop
4200022e:	eb42 0202 	adc.w	r2, r2, r2
42000232:	bf28      	it	cs
42000234:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
42000238:	ebb0 0f01 	cmp.w	r0, r1
4200023c:	bf00      	nop
4200023e:	eb42 0202 	adc.w	r2, r2, r2
42000242:	bf28      	it	cs
42000244:	eba0 0001 	subcs.w	r0, r0, r1
42000248:	4610      	mov	r0, r2
4200024a:	4770      	bx	lr
4200024c:	bf0c      	ite	eq
4200024e:	2001      	moveq	r0, #1
42000250:	2000      	movne	r0, #0
42000252:	4770      	bx	lr
42000254:	fab1 f281 	clz	r2, r1
42000258:	f1c2 021f 	rsb	r2, r2, #31
4200025c:	fa20 f002 	lsr.w	r0, r0, r2
42000260:	4770      	bx	lr
42000262:	b108      	cbz	r0, 42000268 <__udivsi3+0x258>
42000264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
42000268:	f000 b80e 	b.w	42000288 <__aeabi_idiv0>

4200026c <__aeabi_uidivmod>:
4200026c:	2900      	cmp	r1, #0
4200026e:	d0f8      	beq.n	42000262 <__udivsi3+0x252>
42000270:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
42000274:	f7ff fecc 	bl	42000010 <__udivsi3>
42000278:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
4200027c:	fb02 f300 	mul.w	r3, r2, r0
42000280:	eba1 0103 	sub.w	r1, r1, r3
42000284:	4770      	bx	lr
42000286:	bf00      	nop

42000288 <__aeabi_idiv0>:
42000288:	4770      	bx	lr
4200028a:	bf00      	nop

4200028c <print_format_to_buf_arg>:
    if (*buf < end) {
        *(*buf)++ = c;
    }
}

u32 print_format_to_buf_arg(char* buf, u32 len, const char* str, va_list arg) {
4200028c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
42000290:	e24dd054 	sub	sp, sp, #84	; 0x54
42000294:	e1a07000 	mov	r7, r0
42000298:	e58d1008 	str	r1, [sp, #8]
4200029c:	e1a0c002 	mov	ip, r2
    // Save the end of the buffer so that we can detect overflow
    char* const end = buf + len;
420002a0:	e080b001 	add	fp, r0, r1

    for (; *str; str++) {
420002a4:	e5d21000 	ldrb	r1, [r2]
420002a8:	e3510000 	cmp	r1, #0
420002ac:	0a000169 	beq	42000858 <print_format_to_buf_arg+0x5cc>
420002b0:	e1a02003 	mov	r2, r3
420002b4:	e28d3038 	add	r3, sp, #56	; 0x38
420002b8:	e58d300c 	str	r3, [sp, #12]
            }

            // Convert the number to string representation
            u32 num_pos = (u32)num;
            while (num_pos) {
                num_buf[index++] = number_lookup[num_pos % base] | lowercase;
420002bc:	e30039c8 	movw	r3, #2504	; 0x9c8
420002c0:	e3443200 	movt	r3, #16896	; 0x4200
420002c4:	e58d3004 	str	r3, [sp, #4]
420002c8:	e300326d 	movw	r3, #621	; 0x26d
420002cc:	e3443200 	movt	r3, #16896	; 0x4200
420002d0:	e58d3010 	str	r3, [sp, #16]
                num_pos /= base;
420002d4:	e3003011 	movw	r3, #17
420002d8:	e3443200 	movt	r3, #16896	; 0x4200
420002dc:	e58d3014 	str	r3, [sp, #20]
420002e0:	ea00009c 	b	42000558 <print_format_to_buf_arg+0x2cc>
        while (*++str) {
420002e4:	e28c4001 	add	r4, ip, #1
420002e8:	e5dc3001 	ldrb	r3, [ip, #1]
420002ec:	e3530000 	cmp	r3, #0
        u16 flags = 0;
420002f0:	03a05000 	moveq	r5, #0
        while (*++str) {
420002f4:	0a000016 	beq	42000354 <print_format_to_buf_arg+0xc8>
        u16 flags = 0;
420002f8:	e3a05000 	mov	r5, #0
420002fc:	ea000003 	b	42000310 <print_format_to_buf_arg+0x84>
            else if (*str == ' ') flags |= FLAG_SIGN_IGNORE;
42000300:	e3855008 	orr	r5, r5, #8
        while (*++str) {
42000304:	e5f43001 	ldrb	r3, [r4, #1]!
42000308:	e3530000 	cmp	r3, #0
4200030c:	0a000010 	beq	42000354 <print_format_to_buf_arg+0xc8>
42000310:	e2441001 	sub	r1, r4, #1
            if      (*str == '!') flags |= FLAG_PREFIX;
42000314:	e3530021 	cmp	r3, #33	; 0x21
42000318:	03855001 	orreq	r5, r5, #1
4200031c:	0afffff8 	beq	42000304 <print_format_to_buf_arg+0x78>
            else if (*str == '<') flags |= FLAG_LEFT;
42000320:	e353003c 	cmp	r3, #60	; 0x3c
42000324:	03855002 	orreq	r5, r5, #2
42000328:	0afffff5 	beq	42000304 <print_format_to_buf_arg+0x78>
            else if (*str == '0') flags |= FLAG_ZERO;
4200032c:	e3530030 	cmp	r3, #48	; 0x30
42000330:	03855004 	orreq	r5, r5, #4
42000334:	0afffff2 	beq	42000304 <print_format_to_buf_arg+0x78>
            else if (*str == '+') flags |= FLAG_SIGN_FORCE;
42000338:	e353002b 	cmp	r3, #43	; 0x2b
4200033c:	03855010 	orreq	r5, r5, #16
42000340:	0affffef 	beq	42000304 <print_format_to_buf_arg+0x78>
            else if (*str == ' ') flags |= FLAG_SIGN_IGNORE;
42000344:	e3530020 	cmp	r3, #32
42000348:	0affffec 	beq	42000300 <print_format_to_buf_arg+0x74>
        if (*str == ':') {
4200034c:	e353003a 	cmp	r3, #58	; 0x3a
            str++;
42000350:	02814002 	addeq	r4, r1, #2
        if (*str == '_') {
42000354:	e5d43000 	ldrb	r3, [r4]
42000358:	e353005f 	cmp	r3, #95	; 0x5f
            width = (i32)va_arg(arg, int);
4200035c:	04926004 	ldreq	r6, [r2], #4
            str++;
42000360:	02844001 	addeq	r4, r4, #1
        if (*str == '_') {
42000364:	0a000004 	beq	4200037c <print_format_to_buf_arg+0xf0>
        } else if (*str >= '0' && *str <= '9') {
42000368:	e2431030 	sub	r1, r3, #48	; 0x30
4200036c:	e6ef1071 	uxtb	r1, r1
42000370:	e3510009 	cmp	r1, #9
        i32 width = -1;
42000374:	83e06000 	mvnhi	r6, #0
        } else if (*str >= '0' && *str <= '9') {
42000378:	9a000041 	bls	42000484 <print_format_to_buf_arg+0x1f8>
        if (*str == ':') {
4200037c:	e5d43000 	ldrb	r3, [r4]
42000380:	e353003a 	cmp	r3, #58	; 0x3a
            str++;
42000384:	02844001 	addeq	r4, r4, #1
        switch (*str) {
42000388:	e5d43000 	ldrb	r3, [r4]
4200038c:	e2433042 	sub	r3, r3, #66	; 0x42
42000390:	e3530039 	cmp	r3, #57	; 0x39
42000394:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
42000398:	ea00005c 	b	42000510 <print_format_to_buf_arg+0x284>
4200039c:	42000574 	.word	0x42000574
420003a0:	420004c0 	.word	0x420004c0
420003a4:	42000510 	.word	0x42000510
420003a8:	42000510 	.word	0x42000510
420003ac:	42000510 	.word	0x42000510
420003b0:	42000510 	.word	0x42000510
420003b4:	42000510 	.word	0x42000510
420003b8:	42000510 	.word	0x42000510
420003bc:	42000510 	.word	0x42000510
420003c0:	42000510 	.word	0x42000510
420003c4:	42000510 	.word	0x42000510
420003c8:	42000510 	.word	0x42000510
420003cc:	42000510 	.word	0x42000510
420003d0:	42000510 	.word	0x42000510
420003d4:	420004e4 	.word	0x420004e4
420003d8:	42000510 	.word	0x42000510
420003dc:	420004f4 	.word	0x420004f4
420003e0:	420004b4 	.word	0x420004b4
420003e4:	42000510 	.word	0x42000510
420003e8:	42000510 	.word	0x42000510
420003ec:	42000510 	.word	0x42000510
420003f0:	42000510 	.word	0x42000510
420003f4:	420004ac 	.word	0x420004ac
420003f8:	42000510 	.word	0x42000510
420003fc:	42000510 	.word	0x42000510
42000400:	42000510 	.word	0x42000510
42000404:	42000510 	.word	0x42000510
42000408:	42000510 	.word	0x42000510
4200040c:	42000510 	.word	0x42000510
42000410:	42000510 	.word	0x42000510
42000414:	42000510 	.word	0x42000510
42000418:	42000510 	.word	0x42000510
4200041c:	42000574 	.word	0x42000574
42000420:	420004c0 	.word	0x420004c0
42000424:	42000518 	.word	0x42000518
42000428:	42000510 	.word	0x42000510
4200042c:	42000510 	.word	0x42000510
42000430:	42000510 	.word	0x42000510
42000434:	42000510 	.word	0x42000510
42000438:	420004cc 	.word	0x420004cc
4200043c:	42000510 	.word	0x42000510
42000440:	42000510 	.word	0x42000510
42000444:	42000510 	.word	0x42000510
42000448:	42000510 	.word	0x42000510
4200044c:	42000510 	.word	0x42000510
42000450:	42000510 	.word	0x42000510
42000454:	420004e4 	.word	0x420004e4
42000458:	42000510 	.word	0x42000510
4200045c:	420004f4 	.word	0x420004f4
42000460:	420004b4 	.word	0x420004b4
42000464:	42000510 	.word	0x42000510
42000468:	42000518 	.word	0x42000518
4200046c:	42000510 	.word	0x42000510
42000470:	42000510 	.word	0x42000510
42000474:	420004d8 	.word	0x420004d8
42000478:	42000510 	.word	0x42000510
4200047c:	42000510 	.word	0x42000510
42000480:	42000504 	.word	0x42000504
            width = 0;
42000484:	e3a06000 	mov	r6, #0
                width = width * 10 + (*str++ - '0');
42000488:	e3a0000a 	mov	r0, #10
4200048c:	e2433030 	sub	r3, r3, #48	; 0x30
42000490:	e0263690 	mla	r6, r0, r6, r3
            while (*str >= '0' && *str <= '9') {
42000494:	e5f43001 	ldrb	r3, [r4, #1]!
42000498:	e2431030 	sub	r1, r3, #48	; 0x30
4200049c:	e6ef1071 	uxtb	r1, r1
420004a0:	e3510009 	cmp	r1, #9
420004a4:	9afffff8 	bls	4200048c <print_format_to_buf_arg+0x200>
420004a8:	eaffffb3 	b	4200037c <print_format_to_buf_arg+0xf0>
        switch (*str) {
420004ac:	e3a08010 	mov	r8, #16
420004b0:	ea000019 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_STRING;
420004b4:	e3855080 	orr	r5, r5, #128	; 0x80
        u8 base = 10;
420004b8:	e3a0800a 	mov	r8, #10
                break;
420004bc:	ea000016 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_CHAR;
420004c0:	e3855c01 	orr	r5, r5, #256	; 0x100
        u8 base = 10;
420004c4:	e3a0800a 	mov	r8, #10
                break;
420004c8:	ea000013 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_SIGN;
420004cc:	e3855040 	orr	r5, r5, #64	; 0x40
        u8 base = 10;
420004d0:	e3a0800a 	mov	r8, #10
420004d4:	ea000010 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_LOWERCASE;
420004d8:	e3855020 	orr	r5, r5, #32
                base = 16;
420004dc:	e3a08010 	mov	r8, #16
420004e0:	ea00000d 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_PREFIX;
420004e4:	e3855001 	orr	r5, r5, #1
                base = 16;
420004e8:	e3a08010 	mov	r8, #16
                width = 8;
420004ec:	e3a06008 	mov	r6, #8
                break;
420004f0:	ea000009 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_PREFIX;
420004f4:	e3855001 	orr	r5, r5, #1
                base = 2;
420004f8:	e3a08002 	mov	r8, #2
                width = 32;
420004fc:	e3a06020 	mov	r6, #32
                break;
42000500:	ea000005 	b	4200051c <print_format_to_buf_arg+0x290>
                flags |= FLAG_BRACKET;
42000504:	e3855c02 	orr	r5, r5, #512	; 0x200
        u8 base = 10;
42000508:	e3a0800a 	mov	r8, #10
                break;
4200050c:	ea000002 	b	4200051c <print_format_to_buf_arg+0x290>
                str--;
42000510:	e2444001 	sub	r4, r4, #1
                continue;
42000514:	ea00000b 	b	42000548 <print_format_to_buf_arg+0x2bc>
        u8 base = 10;
42000518:	e3a0800a 	mov	r8, #10
        if (flags & FLAG_CHAR) {
4200051c:	e3150c01 	tst	r5, #256	; 0x100
42000520:	0a000015 	beq	4200057c <print_format_to_buf_arg+0x2f0>
            put_char((char)va_arg(arg, int), &buf, end);
42000524:	e2823004 	add	r3, r2, #4
    if (*buf < end) {
42000528:	e15b0007 	cmp	fp, r7
            put_char((char)va_arg(arg, int), &buf, end);
4200052c:	91a02003 	movls	r2, r3
42000530:	85922000 	ldrhi	r2, [r2]
42000534:	84c72001 	strbhi	r2, [r7], #1
42000538:	81a02003 	movhi	r2, r3
                }
            }
        }

        // Skip the last bracket if any
        if (*str == '}') {
4200053c:	e5d43000 	ldrb	r3, [r4]
42000540:	e353007d 	cmp	r3, #125	; 0x7d
            str++;
42000544:	02844001 	addeq	r4, r4, #1
    for (; *str; str++) {
42000548:	e284c001 	add	ip, r4, #1
4200054c:	e5d41001 	ldrb	r1, [r4, #1]
42000550:	e3510000 	cmp	r1, #0
42000554:	0a0000bf 	beq	42000858 <print_format_to_buf_arg+0x5cc>
        if (*str != '{') {
42000558:	e351007b 	cmp	r1, #123	; 0x7b
4200055c:	0affff60 	beq	420002e4 <print_format_to_buf_arg+0x58>
    if (*buf < end) {
42000560:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
42000564:	84c71001 	strbhi	r1, [r7], #1
42000568:	81a0400c 	movhi	r4, ip
    if (*buf < end) {
4200056c:	91a0400c 	movls	r4, ip
42000570:	eafffff4 	b	42000548 <print_format_to_buf_arg+0x2bc>
                base = 2;
42000574:	e3a08002 	mov	r8, #2
42000578:	eaffffe7 	b	4200051c <print_format_to_buf_arg+0x290>
        } else if (flags & FLAG_STRING) {
4200057c:	e3150080 	tst	r5, #128	; 0x80
42000580:	0a000035 	beq	4200065c <print_format_to_buf_arg+0x3d0>
            const char* ptr = (const char *)va_arg(arg, char *);
42000584:	e4920004 	ldr	r0, [r2], #4
            if (width < 0) {
42000588:	e3560000 	cmp	r6, #0
4200058c:	ba000023 	blt	42000620 <print_format_to_buf_arg+0x394>
                for (i = 0; (i < width) && ptr[i]; i++);
42000590:	e1a0e006 	mov	lr, r6
42000594:	0a0000bb 	beq	42000888 <print_format_to_buf_arg+0x5fc>
42000598:	e2403001 	sub	r3, r0, #1
4200059c:	e3a0c000 	mov	ip, #0
420005a0:	e5f31001 	ldrb	r1, [r3, #1]!
420005a4:	e3510000 	cmp	r1, #0
420005a8:	0a000025 	beq	42000644 <print_format_to_buf_arg+0x3b8>
420005ac:	e28cc001 	add	ip, ip, #1
420005b0:	e15c000e 	cmp	ip, lr
420005b4:	1afffff9 	bne	420005a0 <print_format_to_buf_arg+0x314>
                if ((flags & FLAG_LEFT) == 0) {
420005b8:	e2155002 	ands	r5, r5, #2
420005bc:	0a0000aa 	beq	4200086c <print_format_to_buf_arg+0x5e0>
                u32 padding = width - i;
420005c0:	e3a03000 	mov	r3, #0
                while (i--) {
420005c4:	e24e1001 	sub	r1, lr, #1
420005c8:	e35e0000 	cmp	lr, #0
420005cc:	0a000009 	beq	420005f8 <print_format_to_buf_arg+0x36c>
420005d0:	e2811001 	add	r1, r1, #1
420005d4:	e0801001 	add	r1, r0, r1
                    put_char(*ptr++, &buf, end);
420005d8:	e2800001 	add	r0, r0, #1
    if (*buf < end) {
420005dc:	e15b0007 	cmp	fp, r7
                    put_char(*ptr++, &buf, end);
420005e0:	8550c001 	ldrbhi	ip, [r0, #-1]
        *(*buf)++ = c;
420005e4:	84c7c001 	strbhi	ip, [r7], #1
                while (i--) {
420005e8:	e1510000 	cmp	r1, r0
420005ec:	1afffff9 	bne	420005d8 <print_format_to_buf_arg+0x34c>
                if (flags & FLAG_LEFT) {
420005f0:	e3550000 	cmp	r5, #0
420005f4:	0affffd0 	beq	4200053c <print_format_to_buf_arg+0x2b0>
                    while (padding--) {
420005f8:	e2431001 	sub	r1, r3, #1
420005fc:	e3530000 	cmp	r3, #0
42000600:	0affffcd 	beq	4200053c <print_format_to_buf_arg+0x2b0>
    if (*buf < end) {
42000604:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
42000608:	83a03020 	movhi	r3, #32
4200060c:	84c73001 	strbhi	r3, [r7], #1
                    while (padding--) {
42000610:	e2411001 	sub	r1, r1, #1
42000614:	e3710001 	cmn	r1, #1
42000618:	1afffff9 	bne	42000604 <print_format_to_buf_arg+0x378>
4200061c:	eaffffc6 	b	4200053c <print_format_to_buf_arg+0x2b0>
                while (*ptr) {
42000620:	e5d03000 	ldrb	r3, [r0]
42000624:	e3530000 	cmp	r3, #0
42000628:	0affffc3 	beq	4200053c <print_format_to_buf_arg+0x2b0>
    if (*buf < end) {
4200062c:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
42000630:	84c73001 	strbhi	r3, [r7], #1
                while (*ptr) {
42000634:	e5f03001 	ldrb	r3, [r0, #1]!
42000638:	e3530000 	cmp	r3, #0
4200063c:	1afffffa 	bne	4200062c <print_format_to_buf_arg+0x3a0>
42000640:	eaffffbd 	b	4200053c <print_format_to_buf_arg+0x2b0>
                u32 padding = width - i;
42000644:	e04e300c 	sub	r3, lr, ip
                if ((flags & FLAG_LEFT) == 0) {
42000648:	e2155002 	ands	r5, r5, #2
                u32 padding = width - i;
4200064c:	01a0e003 	moveq	lr, r3
                if ((flags & FLAG_LEFT) == 0) {
42000650:	0a000090 	beq	42000898 <print_format_to_buf_arg+0x60c>
42000654:	e1a0e00c 	mov	lr, ip
42000658:	eaffffd9 	b	420005c4 <print_format_to_buf_arg+0x338>
            char pad_char = (flags & FLAG_ZERO) ? '0' : ' ';
4200065c:	e3150004 	tst	r5, #4
42000660:	13a03030 	movne	r3, #48	; 0x30
42000664:	03a03020 	moveq	r3, #32
42000668:	e58d3034 	str	r3, [sp, #52]	; 0x34
            i32 num = (i32)va_arg(arg, int);
4200066c:	e4923004 	ldr	r3, [r2], #4
42000670:	e58d2018 	str	r2, [sp, #24]
            u8 lowercase = (flags & FLAG_LOWERCASE) ? FLAG_LOWERCASE : 0;
42000674:	e2052020 	and	r2, r5, #32
42000678:	e1a01002 	mov	r1, r2
            if (num < 0 && (flags & FLAG_SIGN)) {
4200067c:	e3530000 	cmp	r3, #0
42000680:	ba00004b 	blt	420007b4 <print_format_to_buf_arg+0x528>
                sign = '+';
42000684:	e3150010 	tst	r5, #16
42000688:	03a02000 	moveq	r2, #0
4200068c:	13a0202b 	movne	r2, #43	; 0x2b
                sign = ' ';
42000690:	e3150008 	tst	r5, #8
42000694:	13a02020 	movne	r2, #32
42000698:	e58d201c 	str	r2, [sp, #28]
            u32 num_pos = (u32)num;
4200069c:	e1a02003 	mov	r2, r3
            while (num_pos) {
420006a0:	e3530000 	cmp	r3, #0
            u32 index = 0;
420006a4:	01a0a003 	moveq	sl, r3
            while (num_pos) {
420006a8:	0a00001e 	beq	42000728 <print_format_to_buf_arg+0x49c>
420006ac:	e28d9038 	add	r9, sp, #56	; 0x38
                sign = '-';
420006b0:	e3a0a000 	mov	sl, #0
420006b4:	e58d4020 	str	r4, [sp, #32]
420006b8:	e58d6024 	str	r6, [sp, #36]	; 0x24
420006bc:	e1a04002 	mov	r4, r2
420006c0:	e58db028 	str	fp, [sp, #40]	; 0x28
420006c4:	e58d502c 	str	r5, [sp, #44]	; 0x2c
420006c8:	e1a06001 	mov	r6, r1
420006cc:	e58d7030 	str	r7, [sp, #48]	; 0x30
420006d0:	e59d7010 	ldr	r7, [sp, #16]
420006d4:	e59db014 	ldr	fp, [sp, #20]
                num_buf[index++] = number_lookup[num_pos % base] | lowercase;
420006d8:	e28aa001 	add	sl, sl, #1
420006dc:	e1a01008 	mov	r1, r8
420006e0:	e1a00004 	mov	r0, r4
420006e4:	e12fff37 	blx	r7
420006e8:	e59d3004 	ldr	r3, [sp, #4]
420006ec:	e7d33001 	ldrb	r3, [r3, r1]
420006f0:	e1863003 	orr	r3, r6, r3
420006f4:	e4c93001 	strb	r3, [r9], #1
                num_pos /= base;
420006f8:	e1a05004 	mov	r5, r4
420006fc:	e1a01008 	mov	r1, r8
42000700:	e1a00004 	mov	r0, r4
42000704:	e12fff3b 	blx	fp
42000708:	e1a04000 	mov	r4, r0
            while (num_pos) {
4200070c:	e1580005 	cmp	r8, r5
42000710:	9afffff0 	bls	420006d8 <print_format_to_buf_arg+0x44c>
42000714:	e59d4020 	ldr	r4, [sp, #32]
42000718:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
4200071c:	e59db028 	ldr	fp, [sp, #40]	; 0x28
42000720:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
42000724:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
            if (flags & FLAG_PREFIX) {
42000728:	e3150001 	tst	r5, #1
4200072c:	0a000003 	beq	42000740 <print_format_to_buf_arg+0x4b4>
                if (base == 16) {
42000730:	e3580010 	cmp	r8, #16
42000734:	0a000027 	beq	420007d8 <print_format_to_buf_arg+0x54c>
                } else if (base == 2) {
42000738:	e3580002 	cmp	r8, #2
4200073c:	0a000030 	beq	42000804 <print_format_to_buf_arg+0x578>
            if (sign) {
42000740:	e59d201c 	ldr	r2, [sp, #28]
42000744:	e3520000 	cmp	r2, #0
                num_buf[index++] = sign;
42000748:	128d3050 	addne	r3, sp, #80	; 0x50
4200074c:	1083300a 	addne	r3, r3, sl
42000750:	15432018 	strbne	r2, [r3, #-24]	; 0xffffffe8
42000754:	128aa001 	addne	sl, sl, #1
            if (width >= 0) {
42000758:	e3560000 	cmp	r6, #0
4200075c:	ba00005a 	blt	420008cc <print_format_to_buf_arg+0x640>
                padding = (index > width) ? 0 : width - index;
42000760:	e1a02006 	mov	r2, r6
42000764:	e156000a 	cmp	r6, sl
42000768:	3a000057 	bcc	420008cc <print_format_to_buf_arg+0x640>
4200076c:	e046100a 	sub	r1, r6, sl
            if ((flags & FLAG_LEFT) == 0) {
42000770:	e2155002 	ands	r5, r5, #2
42000774:	1a000057 	bne	420008d8 <print_format_to_buf_arg+0x64c>
                while (padding--) {
42000778:	e2410001 	sub	r0, r1, #1
4200077c:	e3510000 	cmp	r1, #0
42000780:	0a00003c 	beq	42000878 <print_format_to_buf_arg+0x5ec>
42000784:	e1a03000 	mov	r3, r0
42000788:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    if (*buf < end) {
4200078c:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
42000790:	84c71001 	strbhi	r1, [r7], #1
                while (padding--) {
42000794:	e2433001 	sub	r3, r3, #1
42000798:	e3730001 	cmn	r3, #1
4200079c:	1afffffa 	bne	4200078c <print_format_to_buf_arg+0x500>
420007a0:	e04a2002 	sub	r2, sl, r2
420007a4:	e0821000 	add	r1, r2, r0
            while (index) {
420007a8:	e35a0000 	cmp	sl, #0
420007ac:	1a00004b 	bne	420008e0 <print_format_to_buf_arg+0x654>
420007b0:	ea000055 	b	4200090c <print_format_to_buf_arg+0x680>
            if (num < 0 && (flags & FLAG_SIGN)) {
420007b4:	e3150040 	tst	r5, #64	; 0x40
420007b8:	0affffb1 	beq	42000684 <print_format_to_buf_arg+0x3f8>
            u32 num_pos = (u32)num;
420007bc:	e2633000 	rsb	r3, r3, #0
420007c0:	e1a02003 	mov	r2, r3
420007c4:	e3150008 	tst	r5, #8
420007c8:	13a03020 	movne	r3, #32
420007cc:	03a0302d 	moveq	r3, #45	; 0x2d
420007d0:	e58d301c 	str	r3, [sp, #28]
420007d4:	eaffffb4 	b	420006ac <print_format_to_buf_arg+0x420>
                    num_buf[index++] = 'x';
420007d8:	e28a3001 	add	r3, sl, #1
420007dc:	e28d2050 	add	r2, sp, #80	; 0x50
420007e0:	e082200a 	add	r2, r2, sl
420007e4:	e3a01078 	mov	r1, #120	; 0x78
420007e8:	e5421018 	strb	r1, [r2, #-24]	; 0xffffffe8
                    num_buf[index++] = '0';
420007ec:	e28d2050 	add	r2, sp, #80	; 0x50
420007f0:	e0823003 	add	r3, r2, r3
420007f4:	e28aa002 	add	sl, sl, #2
420007f8:	e3a02030 	mov	r2, #48	; 0x30
420007fc:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
42000800:	eaffffce 	b	42000740 <print_format_to_buf_arg+0x4b4>
                    num_buf[index++] = 'b';
42000804:	e28a3001 	add	r3, sl, #1
42000808:	e28d2050 	add	r2, sp, #80	; 0x50
4200080c:	e082200a 	add	r2, r2, sl
42000810:	e3a01062 	mov	r1, #98	; 0x62
42000814:	e5421018 	strb	r1, [r2, #-24]	; 0xffffffe8
                    num_buf[index++] = '0';
42000818:	e28d2050 	add	r2, sp, #80	; 0x50
4200081c:	e0823003 	add	r3, r2, r3
42000820:	e28aa002 	add	sl, sl, #2
42000824:	e3a02030 	mov	r2, #48	; 0x30
42000828:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
4200082c:	eaffffc3 	b	42000740 <print_format_to_buf_arg+0x4b4>
                while (padding--) {
42000830:	e2413001 	sub	r3, r1, #1
42000834:	e3510000 	cmp	r1, #0
42000838:	0a000033 	beq	4200090c <print_format_to_buf_arg+0x680>
4200083c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    if (*buf < end) {
42000840:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
42000844:	84c72001 	strbhi	r2, [r7], #1
                while (padding--) {
42000848:	e2433001 	sub	r3, r3, #1
4200084c:	e3730001 	cmn	r3, #1
42000850:	1afffffa 	bne	42000840 <print_format_to_buf_arg+0x5b4>
42000854:	ea00002c 	b	4200090c <print_format_to_buf_arg+0x680>
        }
    }
    return buf + len - end;
42000858:	e59d3008 	ldr	r3, [sp, #8]
4200085c:	e0870003 	add	r0, r7, r3
42000860:	e040000b 	sub	r0, r0, fp
}
42000864:	e28dd054 	add	sp, sp, #84	; 0x54
42000868:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (i = 0; (i < width) && ptr[i]; i++);
4200086c:	e1a0c00e 	mov	ip, lr
                    while (padding--) {
42000870:	e3e03000 	mvn	r3, #0
42000874:	ea000010 	b	420008bc <print_format_to_buf_arg+0x630>
                while (padding--) {
42000878:	e1a01000 	mov	r1, r0
4200087c:	eaffffc9 	b	420007a8 <print_format_to_buf_arg+0x51c>
42000880:	e3e01000 	mvn	r1, #0
42000884:	eaffffc7 	b	420007a8 <print_format_to_buf_arg+0x51c>
                if ((flags & FLAG_LEFT) == 0) {
42000888:	e2155002 	ands	r5, r5, #2
                u32 padding = width - i;
4200088c:	11a03006 	movne	r3, r6
                if ((flags & FLAG_LEFT) == 0) {
42000890:	1affff58 	bne	420005f8 <print_format_to_buf_arg+0x36c>
                for (i = 0; (i < width) && ptr[i]; i++);
42000894:	e1a0c00e 	mov	ip, lr
                    while (padding--) {
42000898:	e24e3001 	sub	r3, lr, #1
4200089c:	e35e0000 	cmp	lr, #0
420008a0:	0a000005 	beq	420008bc <print_format_to_buf_arg+0x630>
    if (*buf < end) {
420008a4:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
420008a8:	83a01020 	movhi	r1, #32
420008ac:	84c71001 	strbhi	r1, [r7], #1
                    while (padding--) {
420008b0:	e2433001 	sub	r3, r3, #1
420008b4:	e3730001 	cmn	r3, #1
420008b8:	1afffff9 	bne	420008a4 <print_format_to_buf_arg+0x618>
                while (i--) {
420008bc:	e24c1001 	sub	r1, ip, #1
420008c0:	e35c0000 	cmp	ip, #0
420008c4:	1affff41 	bne	420005d0 <print_format_to_buf_arg+0x344>
420008c8:	eaffff1b 	b	4200053c <print_format_to_buf_arg+0x2b0>
            if ((flags & FLAG_LEFT) == 0) {
420008cc:	e2155002 	ands	r5, r5, #2
420008d0:	0affffea 	beq	42000880 <print_format_to_buf_arg+0x5f4>
420008d4:	e3a01000 	mov	r1, #0
            while (index) {
420008d8:	e35a0000 	cmp	sl, #0
420008dc:	0affffd3 	beq	42000830 <print_format_to_buf_arg+0x5a4>
420008e0:	e28d3038 	add	r3, sp, #56	; 0x38
420008e4:	e083300a 	add	r3, r3, sl
420008e8:	e59d200c 	ldr	r2, [sp, #12]
    if (*buf < end) {
420008ec:	e15b0007 	cmp	fp, r7
        *(*buf)++ = c;
420008f0:	85530001 	ldrbhi	r0, [r3, #-1]
420008f4:	84c70001 	strbhi	r0, [r7], #1
            while (index) {
420008f8:	e2433001 	sub	r3, r3, #1
420008fc:	e1530002 	cmp	r3, r2
42000900:	1afffff9 	bne	420008ec <print_format_to_buf_arg+0x660>
            if (flags & FLAG_LEFT) {
42000904:	e3550000 	cmp	r5, #0
42000908:	1affffc8 	bne	42000830 <print_format_to_buf_arg+0x5a4>
            i32 num = (i32)va_arg(arg, int);
4200090c:	e59d2018 	ldr	r2, [sp, #24]
42000910:	eaffff09 	b	4200053c <print_format_to_buf_arg+0x2b0>

42000914 <main>:

#include <chaos/types.h>
#include <chaos/kprint.h>
#include <sama5d2/regmap.h>

void main() {
42000914:	e92d4010 	push	{r4, lr}

    kprint("Starting chaos kernel v1.0\n");
42000918:	e30009dc 	movw	r0, #2524	; 0x9dc
4200091c:	e3440200 	movt	r0, #16896	; 0x4200
42000920:	e3003930 	movw	r3, #2352	; 0x930
42000924:	e3443200 	movt	r3, #16896	; 0x4200
42000928:	e12fff33 	blx	r3

    while (1);
4200092c:	eafffffe 	b	4200092c <main+0x18>

42000930 <kprint>:
#define KPRINT_BUF_SIZE 1024

// Kernel print buffer
static char kprint_buf[KPRINT_BUF_SIZE];

void kprint(const char* message, ...) {
42000930:	e92d000f 	push	{r0, r1, r2, r3}
42000934:	e92d4030 	push	{r4, r5, lr}
42000938:	e24dd00c 	sub	sp, sp, #12
    va_list arg;
    va_start(arg, message);
4200093c:	e28d301c 	add	r3, sp, #28
42000940:	e58d3004 	str	r3, [sp, #4]
    u32 count =
        print_format_to_buf_arg(kprint_buf, KPRINT_BUF_SIZE, message, arg);
42000944:	e3014a30 	movw	r4, #6704	; 0x1a30
42000948:	e3444200 	movt	r4, #16896	; 0x4200
4200094c:	e59d2018 	ldr	r2, [sp, #24]
42000950:	e3a01b01 	mov	r1, #1024	; 0x400
42000954:	e1a00004 	mov	r0, r4
42000958:	e300528c 	movw	r5, #652	; 0x28c
4200095c:	e3445200 	movt	r5, #16896	; 0x4200
42000960:	e12fff35 	blx	r5
42000964:	e1a01000 	mov	r1, r0
    va_end(arg);

    kprint_from_buf(kprint_buf, count);
42000968:	e1a00004 	mov	r0, r4
4200096c:	e3003988 	movw	r3, #2440	; 0x988
42000970:	e3443200 	movt	r3, #16896	; 0x4200
42000974:	e12fff33 	blx	r3
}
42000978:	e28dd00c 	add	sp, sp, #12
4200097c:	e8bd4030 	pop	{r4, r5, lr}
42000980:	e28dd010 	add	sp, sp, #16
42000984:	e12fff1e 	bx	lr

42000988 <kprint_from_buf>:
#include <h3/regmap.h>

void kprint_from_buf(const char* buf, u32 size) {
    struct uart_reg* const hw = UART0_REG;
    
    while (size--) {
42000988:	e3510000 	cmp	r1, #0
4200098c:	012fff1e 	bxeq	lr
42000990:	e0801001 	add	r1, r0, r1
        // Wait for empty FIFO
        while (!(hw->lsr & (1 << 5)));
42000994:	e3a02902 	mov	r2, #32768	; 0x8000
42000998:	e34021c2 	movt	r2, #450	; 0x1c2
4200099c:	e5923014 	ldr	r3, [r2, #20]
420009a0:	e3130020 	tst	r3, #32
420009a4:	0afffffc 	beq	4200099c <kprint_from_buf+0x14>
        hw->thr = *buf++;
420009a8:	e4d03001 	ldrb	r3, [r0], #1
420009ac:	e5823000 	str	r3, [r2]
    while (size--) {
420009b0:	e1510000 	cmp	r1, r0
420009b4:	1afffff8 	bne	4200099c <kprint_from_buf+0x14>
420009b8:	e12fff1e 	bx	lr

Disassembly of section .init:

420009bc <_init>:
420009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
420009be:	bf00      	nop

Disassembly of section .fini:

420009c0 <_fini>:
420009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
420009c2:	bf00      	nop
